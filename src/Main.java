import java.util.ArrayList;
import java.util.Random;
import java.util.Scanner;

public class Main {
    /*
    План занятия
    1) Условные операторы(ветвление)
    2) Циклы(for)
    3) Повторение
     */

    /*
    Теория
    Условные операторы(if-else, switch) помогают реализовать ветвление, т.е. разное исполнение инструкций программы в
    зависимости от какого-то условия, например:
    Стоит задача проверить можно ли впускать человека в ночной клуб:
    if(age > 18){
    System.out,println("Welcome");
    }
    else
    {
     System.out,println("Not welcome");
     }

     Разница между if-else и switch:
                    if                          switch
        Удобно поддерживать  не более           Используется, когда условий много
        3 условий

      Умеет вычислять сложные логические       Обрабатывает только один вариант для переданного условия
       условия(можно комбинировать             Условие только одно
       условия)

       Хуже читается, если условий много        Удобно читается при большом количестве условий

       Циклы - позволяют многократно выполнять какие-либо действия.
       while
       for
       do-while
       Все циклы взаимозаменимы, но иногда удобнее использовать  конкретный цикл для решения задачи
       Циклом управляют условия, пока они истины цикл работает, как только они становятся ложными цикл прекращает
       свою работу.
       Существуют специальные операторы для управления ходом исполнения программы в точ числе циклами:
       break - прерывает цикл;

       return - прерывает исполнение метода:
       Если метод типизирован, то возвращается значение
       Если метод нетипизирован, то он просто прекращает исполнение метода

       continue - прекращает исполнение текущей итерации цикла и переходит к следующей

       Итерация - шаг цикла

              условие
       while(true) {
        То что должно выполниться
       }

       Бесконечный цикл - цикл, который сам по себе не может закончиться.
       Главный(пользовательский) цикл приложения - бесконечный цикл, который управляет исполнением приложения и ждет
       команды от пользователя, чтобы завершиться

         i - итератор цикла
           объявление  условие шаг цикла
       for(int i = 0; i < 10; i++){
       }
     */

    /*
    Заметки
     */


    /*
    Задачи со звездочкой
    1) Своя версия ArrayList, т.е. класс для обработки массивов
    2) Игра лоттерея: Сгенеровать 5 чисел: проверить сколько пользователь угадал по значению, сколько пользователь угадал
    по по позиции, добавить возможность сжульничать и узнать выигрышную комбинацию
    3) Сделать 2 задачу при помощи диалоговых окон
     */
    static Scanner scan = new Scanner(System.in);             // Считывание переменных из консоли
    static Random random = new Random();                      // Создаем объект для генерации случайных чисел

    public static void main(String[] args) {
        /*
        Задача вывести числа от 0 до 9
         */
        for (int i = 0; i < 10; i++) {
            System.out.println(i);
        }

//        while (true) {                                        // Запускаем бесконечный цикл
//            System.out.println("Введите свой запрос: ");      // Выводим приглашение ввести запрос
//            String userInput = scan.nextLine();               // Считываем строку - запрос пользователя
//            String chatAnswer = chatBot(userInput);           // Передаем запрос в метод chatBot и получаем от него ответ
//            System.out.println(chatAnswer);                   // Выводим ответ
//            if(userInput.equals("Пока")){                     // Если пользователь ввел Пока, прекращаем исполнение цикла
//                break;                                        // Прерывание цикла
//            }
//        }
//
//        while (true){                                                    // Бесконечный цикл
//            System.out.println("Сделайте ход: ");                        // Приглашаем пользователя сделать ход
//            String humansStep = scan.nextLine();                         // Считывается ход пользователя
//            String compStep = makeCompStep();                            // Генерируем ход компьютера
//            String winner = checkWinner(compStep, humansStep);           // Проверяем победителя
//            System.out.println("Ход компьютера: " + compStep + " " +     // Выводим на экран победителя
//                    "Ход человека: " + humansStep + " " + winner);
//        }



    }
    /* Задача
       Чатбот на минималках
       В бесконечном цикле в метод поступают слова(String): Привет, Как дела?, Пока
       Ответ бота: Привет -> Здравствуйте!, Как дела -> Все отлично. Хотите ли еще что-нибудь узнать? Пока -> Хорошего дня
       При вводе Пока, выходим из приложения.
       Подсказка: Для сравнения строк использовать метод equals, например:
       String str;
       str.equals("Привет")  проверит равна ли строка Привет
               Решение
       1) Создать переменную для слов пользователя и переменную для слов бота
       2) Создать бесконечный цикл while и выходить из него при вводе слова  Пока - использовать break или return
       3) Создать метод(функцию) типа String, которая будет возвращать ответ бота, она должна принимать введенную переменную
       4) Вывести ответ.
       */

    /**
     * Метод для общения с клиентом - отвечает на запросы
     * @param request сам запрос
     * @return ответ бота
     */
      public static String chatBot(String request){                            // Принимает строку и возвращает строку
             String answer = "";                                               // Определяем переменную для ответа
             if(request.equals("Привет")){                                     // Проверяем строку, которую передал пользователь
                  answer = "Здравствуйте!";                                    // Если запрос = Привет, отвечаем: Здравствуйте
             }
             else if(request.equals("Как дела?")){                             // Если запрос = Как дела? отвечаем: Все отлично. Хотите ли еще что-нибудь узнать?
                 answer = "Все отлично. Хотите ли еще что-нибудь узнать?";
             }
             else {                                                            // Во всех остальных случаях отвечаем хорошего дня
                 answer = " Хорошего дня";
             }
             return answer;                                                    // Возвращаем наш ответ в точку вызова в методе main
      }

      /*
      Задача реализовать игру "Камень, ножницы, бумага" в версии человек против компьютера
      Решение
      1) Создать метод для проверки кто победил
      a) Строки: вариант компьютера и вариант человека
      b) Результат кто победил
      2) Игровой(главный) цикл
      3) Вывести результаты в консоль
      4) Считать ход человека  (Scanner)
      5) Сгенерировать ход компьютера (Random)
       */

    /**
     * Метод сравнивает две строки и проверят кто победил
     * @param comp ход компьютера
     * @param human ход человека
     * @return победителя
     */
      public static String checkWinner(String comp, String human){
          String res = "";                                                 // Результат проверки
          if(comp.equals("Ножницы") && human.equals("Бумага")){            // Проверяем результат и записываем его в переменную res
              res = "Победа компьютера";
          }
          else if(comp.equals("Ножницы") && human.equals("Камень")){
              res = "Победа человека";
          }
          else if(comp.equals("Бумага") && human.equals("Камень")){
              res = "Победа компьютера";
          }
          else if(comp.equals("Бумага") && human.equals("Ножницы")){
              res = "Победа человека";
          }
          else if(comp.equals("Камень") && human.equals("Ножницы")){
              res = "Победа компьютера";
          }
          else if(comp.equals("Камень") && human.equals("Бумага")){
              res = "Победа человека";
          }
          else {
              res = "Ничья";
          }
          return res;                                                      // Возвращаем результат
      }

    /**
     * Метод для генерации хода компьютера
     * @return ход компьютера
     */
      public static String makeCompStep(){
          int rand = random.nextInt(3) + 1;                                // Генерирует число в диапазоне от 1 до 3
          String response = "";                                            // Создаем строчную переменную для хода компьютера
          if(rand == 1){                                                   // В зависимости от числа присваиваем ход компьютера
              response = "Камень";
          }
          else if(rand == 2){
              response = "Бумага";
          }
          else {
              response = "Ножницы";
          }
          return response;                                                 // Возвращаем ответ - ход компьюетра
      }

}
